from __future__ import annotations

import numpy as np
from numpy.typing import NDArray

class IntegralContext:
    def __init__(
        self,
        atomic_numbers: NDArray[np.int64],
        positions: NDArray[np.float64],
        basis_set: str,
        deriv_order: int = 0,
        precision: float = float(np.finfo(np.float64).eps),
    ) -> None: ...
    def overlap(self) -> NDArray[np.float64]: ...
    def kinetic(self) -> NDArray[np.float64]: ...
    def nuclear(self) -> NDArray[np.float64]: ...
    def one_body_integrals(
        self,
    ) -> tuple[NDArray[np.float64], NDArray[np.float64], NDArray[np.float64]]: ...
    @property
    def basis_name(self) -> str: ...
    @property
    def deriv_order(self) -> int: ...
    @property
    def precision(self) -> float: ...
    @property
    def num_shells(self) -> int: ...
    @property
    def num_atoms(self) -> int: ...
    @property
    def max_nprim(self) -> int: ...
    @property
    def num_orbitals(self) -> int: ...
    @property
    def max_l(self) -> int: ...
